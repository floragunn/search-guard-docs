image: ruby:2.5
variables:
  LC_ALL: "C.UTF-8"
  LANG: "en_US.UTF-8"
  LANGUAGE: "en_US.UTF-8"

stages:
  - build
  - deploy

build:
  tags:
    - docs
  stage: build
  artifacts:
    paths:
      - _site/
  script:
    - |
      cat /etc/debian_version || true
      uname -a
      echo "Merge marker sanity check"
      (grep -ri "<<<<<<" * || grep -ri ">>>>>>" *) && (echo "found some merge conflicts, will abort"; exit -1)

      echo "## removing old _site directory"
      rm -rf ./_site

      echo "## building docs"
      bundle install
      bundle exec jekyll build --config _config.yml,_versions.yml

deploy:
  tags:
    - docs
  stage: deploy
  image: ubuntu:22.04
  variables:
    website_host: docs    
    sftp_user_name: docs
  dependencies:
    - build
  # only:
  #   - release
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq lftp openssh-client
    - echo "Building branch $CI_COMMIT_REF_NAME"
    - echo "Set SSH configuration for SFTP"
    - eval $(ssh-agent -s)
    - echo "$sftp_user_private_key_base64" | base64 -d | tr -d '\r' | ssh-add -

  script:
    - |
      site_dir=$(grep "baseurl:" ./_versions.yml  | awk '{print $2}')
      sftp_directory=$(sed 's/^\///' <<< $site_dir )
      sftp_root_directory='html'

      #set default SFTP server
      if [ ! ${sftp_server+x} ];  then
        sftp_server=18.203.166.154
      fi
      #set default cloudflare zoneid
      if [ ! ${SG_CLOUDFLARE_ZONEID+x} ];  then
        SG_CLOUDFLARE_ZONEID=21f0b97bf3df0f55bba6ca46b746da1f
      fi
      if [ ! ${REMOVE_CLOUDFLARE_CACHE+x} ];  then
        REMOVE_CLOUDFLARE_CACHE=true
      fi

      echo "Building branch $git_branch"


      echo "Uploading files to SFTP server $sftp_server for host: $website_host"
      lftp --version
      echo "Start SFTP upload"
      lftp -u $sftp_user_name, -e "set sftp:connect-program 'ssh -a -x -o StrictHostKeyChecking=no'; mirror --reverse --delete --parallel=20 --verbose build/ /var/www/$website_host/html/; quit" sftp://$sftp_server


      # if $REMOVE_CLOUDFLARE_CACHE ; then
      #    echo "Deleting Cloudflare Cache"
      #    curl  \
      #    -X POST "https://api.cloudflare.com/client/v4/zones/$SG_CLOUDFLARE_ZONEID/purge_cache" \
      #    -H "Authorization: Bearer $SG_CLOUDFLARE_DECACHE_TOKEN" \
      #    -H "Content-Type: application/json" \
      #    --data '{"purge_everything":true}'
      # fi
      # 
      # if [[ $GIT_COMMIT_DESC == *"noindex"* ]]; then
      #   echo "## Skipping Search Index"
      # else
      #   echo "## Rebuilding Search Index"
      #   bundle exec jekyll algolia push --config _config.yml,_versions.yml
      # fi

